# forge1/docker-compose.yml
# Docker Compose configuration for Forge 1 Platform

version: '3.8'

services:
  # Backend service
  forge1-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: forge1-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - FORGE1_ENV=development
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/data:/app/data
      # Mount Microsoft repository for development
      - ../Multi-Agent-Custom-Automation-Engine-Solution-Accelerator/src/backend:/app/microsoft_backend:ro
    networks:
      - forge1-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis
      - postgres

  # Frontend service
  forge1-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: forge1-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://localhost:8000
    networks:
      - forge1-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      - forge1-backend

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: forge1-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass forge1_redis_pass
    volumes:
      - redis_data:/data
    networks:
      - forge1-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for structured data
  postgres:
    image: postgres:15-alpine
    container_name: forge1-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=forge1
      - POSTGRES_USER=forge1_user
      - POSTGRES_PASSWORD=forge1_db_pass
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - forge1-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U forge1_user -d forge1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: forge1-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - forge1-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: forge1-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=forge1_grafana_pass
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - forge1-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - prometheus

networks:
  forge1-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local